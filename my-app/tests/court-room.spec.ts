import { test, expect } from '@playwright/test';

test('Court Room Timer Starts and Displays Messages', async ({ page }) => {
  await page.goto('/court-room');
  // Set timer and start
  await page.fill('#timer-input', '30');
  await page.click('button:has-text("Start")');
  // Trigger a message immediately (button) so test is deterministic
  await page.click('button:has-text("Trigger Message")');
  // Check message appears (actual UI message contains this substring)
  await expect(page.locator('.messages li')).toContainText('Court is now in session');
  // Verify timer decreases (formatted MM:SS)
  await page.waitForTimeout(2000); // Wait 2 seconds
  const timerText = await page.locator('#timer-display').textContent(); // e.g., "00:30"
  // After 2s the display should no longer be the initial 00:30
  expect(timerText).not.toBe('00:30');
});

test('Court Room Saves Session and Loads Data', async ({ page }) => {
  await page.goto('/court-room');
  // Simulate game: Set timer, trigger message, save
  await page.fill('#timer-input', '20');
  await page.click('button:has-text("Start")');
  // Ensure there's at least one message to save
  await page.click('button:has-text("Trigger Message")');
  // Accept the save dialog that appears in the UI
  page.once('dialog', async (dialog) => {
    await dialog.accept();
  });
  await page.click('button:has-text("Save Session")');
  // Wait for sessions list to update (the page updates sessions without needing reload)
  await page.waitForSelector('.sessions li', { timeout: 10000 });
  const count = await page.locator('.sessions li').count();
  expect(count).toBeGreaterThan(0);
  // Autogenerated example: Verify saved output (e.g., stage or HTML)
  await expect(page.locator('.sessions li')).toContainText('Stage');
});
